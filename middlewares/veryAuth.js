const jwt = require('jsonwebtoken');

// This key is set by us to verify on the server, that the token generated by this server
// is being used to make the request
const SECRET_KEY = process.env.SECRET_KEY;

const verifyAuth = (req, res, next) => {
  try {
    // extract token from headers
    const token = req.headers.authorization;
    console.log(token)
    // If token doesn't exist, we can return an error
    if (!token) {
      return res.status(401).json({
        status: 401,
        message: 'You must sign in first.',
      });
    }
    // verify token and extract the user's info
    const data = jwt.verify(token, SECRET_KEY);
    // if token is expired, send 401 (in the front end, make sure the user is re-routed)
    const currentTime = new Date();
    if (data.exp < currentTime.getTime()) {
      return res.status(401).json({
        status: 401,
        message: 'Your token has expired, sign in again.',
      });
    } else {
      // sends the id needed for the rest of the request, down to the controller
      req.id = data.id;
      // next() is an express way of calling the next function in the middleware path
      next();
    }
  } catch (error) {
    res.status(401).json({
      status: 401,
      message: 'Invalid token.',
    });
  }
};

module.exports = verifyAuth;
